
//filternotiffield_enummethods.go is auto generated by utility enummethods. DO NOT EDIT
//This file have some type methods implementing the Enumerator and json.Marshaler, json.Unmarshaler interfaces.
package cons

import (
	
	"github.com/ivi81/enummethods/enumerator"
)


//IsValid проверка корректности значения
//Реализует интерфейс Validator
func (m FilterNotifField) IsValid() bool {

	switch m {
	case
		Uuid,
		Regnumber,
		Category,
		Status,
		ActStatus,
		NotifCreateTime,
		Updated,
		EventDescr,
		DetectTime,
		EndTime,
		InrelatedObservablesDomain,
		InrelatedObservablesUri,
		InrelatedObservablesIpv4,
		InrelatedObservablesIpv6,
		InrelatedIndicatorsDomainMalware,
		InrelatedIndicatorsDomain,
		InrelatedIndicatorsIpv4,
		InrelatedIndicatorsIpv6,
		InrelatedIndicatorsIpv4Malware,
		InrelatedIndicatorsIpv6Malware,
		InrelatedIndicatorsHash,
		InrelatedIndicatorsEmail,
		InrelatedIndicatorsUri,
		RelatedObservablesEmail,
		RelatedObservablesUri,
		RelatedIndicatorsVuln,
		RelatedIndicatorsAsLir,
		RelatedIndicatorsAsn,
		RelatedIndicatorsAs,
		RelatedObservablesService,
		RelatedObservablesAsPath,
		ProductInfo,
		VulnerabilityId,
		ProductCategory,
		MalwareHash,
		AffectedSystemName,
		AffectedSystemCategory,
		AffectedSystemfunction,
		AffectedSystemConnection,
		AvailabilityImpact,
		IntegrityImpact,
		ConfidentialityImpact,
		CustomImpact:
		return true
	}
	return false
}


//MarshalJSON - реализует метод интерфейса json.Marshaler
func (m FilterNotifField) MarshalJSON() ([]byte, error) {
	return enumerator.MarshalJSON(m)
}

//UnmarshalJSON - реализует метод интерфейса json.UnMarshaler
func (m *FilterNotifField) UnmarshalJSON(data []byte) error {
	return enumerator.UnmarshalJSON(m, data)
}


//MarshalYAML - реализует метод интерфейса yaml.Marshaler
func (m FilterNotifField) MarshalYAML() (interface{}, error) {
	return enumerator.MarshalYAML(m)
}

//UnmarshalYAML - реализует метод интерфейса yaml.UnMarshaler
func (m *FilterNotifField) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumerator.UnmarshalYAML(m, unmarshal)
}


//String конвертация значения типа в строку. 
//Реализует интерфейс Stringer
func (m FilterNotifField) String() string {
	if m.IsValid() {
		return filterNotifField[m]
	}
	return ""
}


//SetValue - конвертация строки в значение перечислимого типа.
//Реализует интерфейс Unstringer
func (m *FilterNotifField) SetValue(s string) bool {
	for i, v := range filterNotifField {
		if v == s {
			*m = FilterNotifField(i)
			return true
		}
	}
	return false
}
